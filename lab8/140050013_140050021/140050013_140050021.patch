diff -Naur /home/yathansh/Music/fuse-tutorial-2016-03-25/config.log /home/yathansh/Desktop/fuse-tutorial-2016-03-25/config.log
--- /home/yathansh/Music/fuse-tutorial-2016-03-25/config.log	2016-10-24 06:35:06.740256000 +0530
+++ /home/yathansh/Desktop/fuse-tutorial-2016-03-25/config.log	2016-10-24 06:39:23.784262585 +0530
@@ -699,6 +699,7 @@
 config.status:885: creating html/Makefile
 config.status:885: creating src/Makefile
 config.status:885: creating src/config.h
+config.status:1066: src/config.h is unchanged
 config.status:1114: executing depfiles commands
 
 ## ---------------- ##
diff -Naur /home/yathansh/Music/fuse-tutorial-2016-03-25/src/bbfs.c /home/yathansh/Desktop/fuse-tutorial-2016-03-25/src/bbfs.c
--- /home/yathansh/Music/fuse-tutorial-2016-03-25/src/bbfs.c	2016-03-27 06:15:20.000000000 +0530
+++ /home/yathansh/Desktop/fuse-tutorial-2016-03-25/src/bbfs.c	2016-10-24 06:15:38.748230000 +0530
@@ -24,6 +24,8 @@
 
 #include "params.h"
 
+#include <openssl/sha.h>
+
 #include <ctype.h>
 #include <dirent.h>
 #include <errno.h>
@@ -43,6 +45,11 @@
 
 #include "log.h"
 
+#define BLOCK_SIZE 4096 //assumeing 4KB block size 
+int block_store_fd ; //file descriptor for blockstore
+int hash_store_fd ; //file descriptor for hashstore
+int num_blockstore = 0; //number of blocks written to blockstore 
+
 //  All the paths I see are relative to the root of the mounted
 //  filesystem.  In order to get to the underlying filesystem, I need to
 //  have the mountpoint.  I'll save it away early on in main(), and then
@@ -52,12 +59,39 @@
 {
     strcpy(fpath, BB_DATA->rootdir);
     strncat(fpath, path, PATH_MAX); // ridiculously long paths will
-				    // break here
+                    // break here
 
     log_msg("    bb_fullpath:  rootdir = \"%s\", path = \"%s\", fpath = \"%s\"\n",
-	    BB_DATA->rootdir, path, fpath);
+        BB_DATA->rootdir, path, fpath);
 }
 
+
+
+
+
+char * int2str(int number){ //used when working with pointers stored in file
+    int n = 3; //assuming integer value to be at max 999
+    int i;
+    char *numberArray =(char *)malloc(n * sizeof(char)); 
+
+    for ( i = n-1; i >= 0; --i, number /= 10 ){
+        numberArray[i] = (number % 10) + '0';
+    }
+    return numberArray;
+}
+
+int str2int(char * input){ //used when working with pointers stored in file
+    int n = 3; //assuming integer value to be at max 999
+    int i;
+    int out=0,temp;
+    int tenpow = 100;
+    for ( i = 0; i < n; ++i){
+        temp = (input[i] - '0');
+        out+=tenpow*temp;
+        tenpow/=10;
+    }
+    return out;
+}
 ///////////////////////////////////////////////////////////
 //
 // Prototypes for all these functions, and the C-style comments,
@@ -69,19 +103,29 @@
  * ignored.  The 'st_ino' field is ignored except if the 'use_ino'
  * mount option is given.
  */
+
+
 int bb_getattr(const char *path, struct stat *statbuf)
 {
     int retstat;
     char fpath[PATH_MAX];
     
     log_msg("\nbb_getattr(path=\"%s\", statbuf=0x%08x)\n",
-	  path, statbuf);
+      path, statbuf);
     bb_fullpath(fpath, path);
 
     retstat = log_syscall("lstat", lstat(fpath, statbuf), 0);
     
     log_stat(statbuf);
     
+    // int fd = open(fpath, O_RDWR);
+    // if(fd < 0){
+    //     log_msg("\nError opening file in function 'bb_getattr'\n");
+    //     return -1;
+    // }
+
+    statbuf->st_size = (statbuf->st_size/3) * (BLOCK_SIZE); //scaling the size of the file
+    statbuf->st_blocks = (statbuf->st_size/512);
     return retstat;
 }
 
@@ -103,13 +147,13 @@
     char fpath[PATH_MAX];
     
     log_msg("bb_readlink(path=\"%s\", link=\"%s\", size=%d)\n",
-	  path, link, size);
+      path, link, size);
     bb_fullpath(fpath, path);
 
     retstat = log_syscall("fpath", readlink(fpath, link, size - 1), 0);
     if (retstat >= 0) {
-	link[retstat] = '\0';
-	retstat = 0;
+    link[retstat] = '\0';
+    retstat = 0;
     }
     
     return retstat;
@@ -127,7 +171,7 @@
     char fpath[PATH_MAX];
     
     log_msg("\nbb_mknod(path=\"%s\", mode=0%3o, dev=%lld)\n",
-	  path, mode, dev);
+      path, mode, dev);
     bb_fullpath(fpath, path);
     
     // On Linux this could just be 'mknod(path, mode, dev)' but this
@@ -136,14 +180,14 @@
     // make a fifo, but saying it should never actually be used for
     // that.
     if (S_ISREG(mode)) {
-	retstat = log_syscall("open", open(fpath, O_CREAT | O_EXCL | O_WRONLY, mode), 0);
-	if (retstat >= 0)
-	    retstat = log_syscall("close", close(retstat), 0);
+    retstat = log_syscall("open", open(fpath, O_CREAT | O_EXCL | O_WRONLY, mode), 0);
+    if (retstat >= 0)
+        retstat = log_syscall("close", close(retstat), 0);
     } else
-	if (S_ISFIFO(mode))
-	    retstat = log_syscall("mkfifo", mkfifo(fpath, mode), 0);
-	else
-	    retstat = log_syscall("mknod", mknod(fpath, mode, dev), 0);
+    if (S_ISFIFO(mode))
+        retstat = log_syscall("mkfifo", mkfifo(fpath, mode), 0);
+    else
+        retstat = log_syscall("mknod", mknod(fpath, mode, dev), 0);
     
     return retstat;
 }
@@ -154,7 +198,7 @@
     char fpath[PATH_MAX];
     
     log_msg("\nbb_mkdir(path=\"%s\", mode=0%3o)\n",
-	    path, mode);
+        path, mode);
     bb_fullpath(fpath, path);
 
     return log_syscall("mkdir", mkdir(fpath, mode), 0);
@@ -166,7 +210,7 @@
     char fpath[PATH_MAX];
     
     log_msg("bb_unlink(path=\"%s\")\n",
-	    path);
+        path);
     bb_fullpath(fpath, path);
 
     return log_syscall("unlink", unlink(fpath), 0);
@@ -178,7 +222,7 @@
     char fpath[PATH_MAX];
     
     log_msg("bb_rmdir(path=\"%s\")\n",
-	    path);
+        path);
     bb_fullpath(fpath, path);
 
     return log_syscall("rmdir", rmdir(fpath), 0);
@@ -194,7 +238,7 @@
     char flink[PATH_MAX];
     
     log_msg("\nbb_symlink(path=\"%s\", link=\"%s\")\n",
-	    path, link);
+        path, link);
     bb_fullpath(flink, link);
 
     return log_syscall("symlink", symlink(path, flink), 0);
@@ -208,7 +252,7 @@
     char fnewpath[PATH_MAX];
     
     log_msg("\nbb_rename(fpath=\"%s\", newpath=\"%s\")\n",
-	    path, newpath);
+        path, newpath);
     bb_fullpath(fpath, path);
     bb_fullpath(fnewpath, newpath);
 
@@ -221,7 +265,7 @@
     char fpath[PATH_MAX], fnewpath[PATH_MAX];
     
     log_msg("\nbb_link(path=\"%s\", newpath=\"%s\")\n",
-	    path, newpath);
+        path, newpath);
     bb_fullpath(fpath, path);
     bb_fullpath(fnewpath, newpath);
 
@@ -234,7 +278,7 @@
     char fpath[PATH_MAX];
     
     log_msg("\nbb_chmod(fpath=\"%s\", mode=0%03o)\n",
-	    path, mode);
+        path, mode);
     bb_fullpath(fpath, path);
 
     return log_syscall("chmod", chmod(fpath, mode), 0);
@@ -247,7 +291,7 @@
     char fpath[PATH_MAX];
     
     log_msg("\nbb_chown(path=\"%s\", uid=%d, gid=%d)\n",
-	    path, uid, gid);
+        path, uid, gid);
     bb_fullpath(fpath, path);
 
     return log_syscall("chown", chown(fpath, uid, gid), 0);
@@ -259,7 +303,7 @@
     char fpath[PATH_MAX];
     
     log_msg("\nbb_truncate(path=\"%s\", newsize=%lld)\n",
-	    path, newsize);
+        path, newsize);
     bb_fullpath(fpath, path);
 
     return log_syscall("truncate", truncate(fpath, newsize), 0);
@@ -272,7 +316,7 @@
     char fpath[PATH_MAX];
     
     log_msg("\nbb_utime(path=\"%s\", ubuf=0x%08x)\n",
-	    path, ubuf);
+        path, ubuf);
     bb_fullpath(fpath, path);
 
     return log_syscall("utime", utime(fpath, ubuf), 0);
@@ -295,7 +339,7 @@
     char fpath[PATH_MAX];
     
     log_msg("\nbb_open(path\"%s\", fi=0x%08x)\n",
-	    path, fi);
+        path, fi);
     bb_fullpath(fpath, path);
 
     // if the open call succeeds, my retstat is the file descriptor,
@@ -303,8 +347,8 @@
     // file descriptor is exactly -1.
     fd = log_syscall("open", open(fpath, fi->flags), 0);
     if (fd < 0)
-	retstat = log_error("open");
-	
+    retstat = log_error("open");
+    
     fi->fh = fd;
 
     log_fi(fi);
@@ -312,6 +356,7 @@
     return retstat;
 }
 
+
 /** Read data from an open file
  *
  * Read should return exactly the number of bytes requested except
@@ -328,16 +373,54 @@
 // can return with anything up to the amount of data requested. nor
 // with the fusexmp code which returns the amount of data also
 // returned by read.
-int bb_read(const char *path, char *buf, size_t size, off_t offset, struct fuse_file_info *fi)
+
+int bb_read(const char *path, char *output_buf, size_t size, off_t offset, struct fuse_file_info *fi)
 {
     int retstat = 0;
     
     log_msg("\nbb_read(path=\"%s\", buf=0x%08x, size=%d, offset=%lld, fi=0x%08x)\n",
-	    path, buf, size, offset, fi);
+        path, output_buf, size, offset, fi);
     // no need to get fpath on this one, since I work from fi->fh not the path
     log_fi(fi);
 
-    return log_syscall("pread", pread(fi->fh, buf, size, offset), 0);
+    // we only read the pointer to the block from the file, not the actual block content
+    // actual block content is stored in "/tmp/blockstore"
+    int i=0,j=0; //temporary variables
+    
+   // char *output_buf = (char *)malloc(sizeof(char) * (size+1)) ; //this contains the output array which was requested 
+
+    int num_blocks_requested_to_read = size / BLOCK_SIZE; //assuming size of data to read will be multiple of 4KB
+    int num_blocks_read = 0;//iterator in while loop below
+    while(num_blocks_read < num_blocks_requested_to_read){ //writing data blockwise
+
+        char * pointer_in_blockstore = (char *)malloc(sizeof(char) * 3);
+        int temp_status;
+        if((temp_status = pread( fi->fh, pointer_in_blockstore, 3, 3*((offset/BLOCK_SIZE) + num_blocks_read))) < 0){ //reading pointer
+            log_msg("\nError occured while reading pointer from file\n");
+            return temp_status;
+        }
+
+        char *temp_buf = (char *)malloc(sizeof(char) * (BLOCK_SIZE+1)); //This array stores the data to be read from a single block
+        if((temp_status = log_syscall("pread", pread(block_store_fd, temp_buf, BLOCK_SIZE, str2int(pointer_in_blockstore)*BLOCK_SIZE), 0)) < 0){// error while reading
+            return temp_status; //reading data block
+        }
+        //found data in blockstore
+        log_msg("\n array content=%s",temp_buf);
+        
+        j=0;
+        memcpy(output_buf+(num_blocks_read*BLOCK_SIZE),temp_buf,strlen(temp_buf));
+        /*for(;j<sizeof(temp_buf);j++,i++){
+            output_buf[i]=temp_buf[j];
+        }*/
+        num_blocks_read++;
+
+    }
+
+    //strncpy(buf,output_buf,strlen(output_buf));
+    //log_msg("\n output buf content=%s",output_buf);
+    
+    retstat = size;
+    return retstat;
 }
 
 /** Write data to an open file
@@ -349,21 +432,103 @@
  * Changed in version 2.2
  */
 // As  with read(), the documentation above is inconsistent with the
-// documentation for the write() system call.
+// documentation for the write() system call.   
+int find_hash(const char *temp_hash)
+{
+    unsigned char temp_hash_to_compare[20]; // hash of temp_buf
+    
+    lseek(hash_store_fd, 0, SEEK_SET);//reading hashstore file from the start
+    int j=0;
+    int temp_status;
+    int found=-1;
+
+    for(j=0;j<num_blockstore;j++){            
+            if((temp_status = pread(hash_store_fd, temp_hash_to_compare, 20, j*20)) < 0){
+                log_msg("\nError occured while searching for hash in hashstore\n");
+                return -1;
+            }
+            else if(temp_status == 0){
+                break;
+                //End of file
+            }
+            //reading a hash value from the hashstore to compare for duplicates
+            else{
+            if(memcmp(temp_hash, temp_hash_to_compare,20) == 0){
+                found=j;break;
+            }}
+        }
+        return found;
+}
+
 int bb_write(const char *path, const char *buf, size_t size, off_t offset,
-	     struct fuse_file_info *fi)
+         struct fuse_file_info *fi)
 {
     int retstat = 0;
     
     log_msg("\nbb_write(path=\"%s\", buf=0x%08x, size=%d, offset=%lld, fi=0x%08x)\n",
-	    path, buf, size, offset, fi
-	    );
+        path, buf, size, offset, fi
+        );
     // no need to get fpath on this one, since I work from fi->fh not the path
     log_fi(fi);
 
-    return log_syscall("pwrite", pwrite(fi->fh, buf, size, offset), 0);
+    // we only write the pointer to the block in the file, not the actual block content
+    // actual block content is stored in "/tmp/blockstore"
+    int i=0,j=0; //temporary variables
+    
+    unsigned char temp_buf[BLOCK_SIZE];//This array stores the data to be written in a single block
+
+    int nbrtw = size / BLOCK_SIZE; //assuming size of data to write will be multiple of 4KB
+    int block_written = 0;//iterator in while loop below
+    while(block_written < nbrtw){ //writing data blockwise
+        // calculating hash of the block which is to be written
+        j=0;
+        for(;j<BLOCK_SIZE;i++,j++){
+            temp_buf[j] = buf[i];
+        }
+
+        unsigned char temp_hash[20];// hash of temp_buf
+        SHA1(temp_buf, sizeof(temp_buf), temp_hash); //calculating hash value
+    
+        lseek(hash_store_fd, 0, SEEK_SET);//reading hashstore file from the start
+
+        int pointer_found;
+      
+        pointer_found=find_hash(temp_hash);
+
+        if(pointer_found == -2){return -1;}
+        else if(pointer_found == -1){//hash of the block not found in hashstore
+
+            if(pwrite(hash_store_fd, temp_hash, 20, num_blockstore*20) <0){
+                log_msg("\nhashstore write failed\n");
+                return -1;
+            }
+            if(pwrite(block_store_fd, temp_buf, BLOCK_SIZE, num_blockstore*BLOCK_SIZE) <0){
+                log_msg("\nblockstore write failed\n");
+                return -1;
+            }
+
+            char * temp_write = int2str(num_blockstore); //to store this pointer in the file
+            log_msg("\ncopy not found for block\n");
+            
+            num_blockstore+=1;//as we have written new block to blockstore
+
+            log_syscall("pwrite", pwrite(fi->fh, temp_write, 3, 3*((offset/BLOCK_SIZE) + block_written) ), 0);  
+            retstat+=BLOCK_SIZE;          
+        }
+        else{ //hash of the block found in hashstore
+            log_msg("\ncopy found for block\n");
+                
+            char * temp_write = int2str(pointer_found);
+            log_syscall("pwrite", pwrite(fi->fh, temp_write, 3, 3*((offset/BLOCK_SIZE) + block_written) ), 0);
+            retstat+=BLOCK_SIZE; 
+        }
+        block_written++;
+    }
+    return retstat;
 }
 
+
+
 /** Get file system statistics
  *
  * The 'f_frsize', 'f_favail', 'f_fsid' and 'f_flag' fields are ignored
@@ -377,7 +542,7 @@
     char fpath[PATH_MAX];
     
     log_msg("\nbb_statfs(path=\"%s\", statv=0x%08x)\n",
-	    path, statv);
+        path, statv);
     bb_fullpath(fpath, path);
     
     // get stats for underlying filesystem
@@ -417,7 +582,7 @@
     log_msg("\nbb_flush(path=\"%s\", fi=0x%08x)\n", path, fi);
     // no need to get fpath on this one, since I work from fi->fh not the path
     log_fi(fi);
-	
+    
     return 0;
 }
 
@@ -438,7 +603,7 @@
 int bb_release(const char *path, struct fuse_file_info *fi)
 {
     log_msg("\nbb_release(path=\"%s\", fi=0x%08x)\n",
-	  path, fi);
+      path, fi);
     log_fi(fi);
 
     // We need to close the file.  Had we allocated any resources
@@ -456,16 +621,16 @@
 int bb_fsync(const char *path, int datasync, struct fuse_file_info *fi)
 {
     log_msg("\nbb_fsync(path=\"%s\", datasync=%d, fi=0x%08x)\n",
-	    path, datasync, fi);
+        path, datasync, fi);
     log_fi(fi);
     
     // some unix-like systems (notably freebsd) don't have a datasync call
 #ifdef HAVE_FDATASYNC
     if (datasync)
-	return log_syscall("fdatasync", fdatasync(fi->fh), 0);
+    return log_syscall("fdatasync", fdatasync(fi->fh), 0);
     else
-#endif	
-	return log_syscall("fsync", fsync(fi->fh), 0);
+#endif  
+    return log_syscall("fsync", fsync(fi->fh), 0);
 }
 
 #ifdef HAVE_SYS_XATTR_H
@@ -475,7 +640,7 @@
     char fpath[PATH_MAX];
     
     log_msg("\nbb_setxattr(path=\"%s\", name=\"%s\", value=\"%s\", size=%d, flags=0x%08x)\n",
-	    path, name, value, size, flags);
+        path, name, value, size, flags);
     bb_fullpath(fpath, path);
 
     return log_syscall("lsetxattr", lsetxattr(fpath, name, value, size, flags), 0);
@@ -488,12 +653,12 @@
     char fpath[PATH_MAX];
     
     log_msg("\nbb_getxattr(path = \"%s\", name = \"%s\", value = 0x%08x, size = %d)\n",
-	    path, name, value, size);
+        path, name, value, size);
     bb_fullpath(fpath, path);
 
     retstat = log_syscall("lgetxattr", lgetxattr(fpath, name, value, size), 0);
     if (retstat >= 0)
-	log_msg("    value = \"%s\"\n", value);
+    log_msg("    value = \"%s\"\n", value);
     
     return retstat;
 }
@@ -506,15 +671,15 @@
     char *ptr;
     
     log_msg("bb_listxattr(path=\"%s\", list=0x%08x, size=%d)\n",
-	    path, list, size
-	    );
+        path, list, size
+        );
     bb_fullpath(fpath, path);
 
     retstat = log_syscall("llistxattr", llistxattr(fpath, list, size), 0);
     if (retstat >= 0) {
-	log_msg("    returned attributes (length %d):\n", retstat);
-	for (ptr = list; ptr < list + retstat; ptr += strlen(ptr)+1)
-	    log_msg("    \"%s\"\n", ptr);
+    log_msg("    returned attributes (length %d):\n", retstat);
+    for (ptr = list; ptr < list + retstat; ptr += strlen(ptr)+1)
+        log_msg("    \"%s\"\n", ptr);
     }
     
     return retstat;
@@ -526,7 +691,7 @@
     char fpath[PATH_MAX];
     
     log_msg("\nbb_removexattr(path=\"%s\", name=\"%s\")\n",
-	    path, name);
+        path, name);
     bb_fullpath(fpath, path);
 
     return log_syscall("lremovexattr", lremovexattr(fpath, name), 0);
@@ -547,7 +712,7 @@
     char fpath[PATH_MAX];
     
     log_msg("\nbb_opendir(path=\"%s\", fi=0x%08x)\n",
-	  path, fi);
+      path, fi);
     bb_fullpath(fpath, path);
 
     // since opendir returns a pointer, takes some custom handling of
@@ -555,7 +720,7 @@
     dp = opendir(fpath);
     log_msg("    opendir returned 0x%p\n", dp);
     if (dp == NULL)
-	retstat = log_error("bb_opendir opendir");
+    retstat = log_error("bb_opendir opendir");
     
     fi->fh = (intptr_t) dp;
     
@@ -587,14 +752,14 @@
  */
 
 int bb_readdir(const char *path, void *buf, fuse_fill_dir_t filler, off_t offset,
-	       struct fuse_file_info *fi)
+           struct fuse_file_info *fi)
 {
     int retstat = 0;
     DIR *dp;
     struct dirent *de;
     
     log_msg("\nbb_readdir(path=\"%s\", buf=0x%08x, filler=0x%08x, offset=%lld, fi=0x%08x)\n",
-	    path, buf, filler, offset, fi);
+        path, buf, filler, offset, fi);
     // once again, no need for fullpath -- but note that I need to cast fi->fh
     dp = (DIR *) (uintptr_t) fi->fh;
 
@@ -605,8 +770,8 @@
     de = readdir(dp);
     log_msg("    readdir returned 0x%p\n", de);
     if (de == 0) {
-	retstat = log_error("bb_readdir readdir");
-	return retstat;
+    retstat = log_error("bb_readdir readdir");
+    return retstat;
     }
 
     // This will copy the entire directory into the buffer.  The loop exits
@@ -614,11 +779,11 @@
     // returns something non-zero.  The first case just means I've
     // read the whole directory; the second means the buffer is full.
     do {
-	log_msg("calling filler with name %s\n", de->d_name);
-	if (filler(buf, de->d_name, NULL, 0) != 0) {
-	    log_msg("    ERROR bb_readdir filler:  buffer full");
-	    return -ENOMEM;
-	}
+    log_msg("calling filler with name %s\n", de->d_name);
+    if (filler(buf, de->d_name, NULL, 0) != 0) {
+        log_msg("    ERROR bb_readdir filler:  buffer full");
+        return -ENOMEM;
+    }
     } while ((de = readdir(dp)) != NULL);
     
     log_fi(fi);
@@ -635,7 +800,7 @@
     int retstat = 0;
     
     log_msg("\nbb_releasedir(path=\"%s\", fi=0x%08x)\n",
-	    path, fi);
+        path, fi);
     log_fi(fi);
     
     closedir((DIR *) (uintptr_t) fi->fh);
@@ -657,7 +822,7 @@
     int retstat = 0;
     
     log_msg("\nbb_fsyncdir(path=\"%s\", datasync=%d, fi=0x%08x)\n",
-	    path, datasync, fi);
+        path, datasync, fi);
     log_fi(fi);
     
     return retstat;
@@ -699,6 +864,14 @@
  */
 void bb_destroy(void *userdata)
 {
+    // Deleting '/tmp/blockstore' file
+    log_msg("Deleting '/tmp/blockstore' file\n");
+    log_syscall("unlink", unlink("/tmp/blockstore"), 0);
+
+    //Deleting '/tmp/hashstore' file
+    log_msg("Deleting '/tmp/hashstore' file\n");
+    log_syscall("unlink", unlink("/tmp/hashstore"), 0);
+
     log_msg("\nbb_destroy(userdata=0x%08x)\n", userdata);
 }
 
@@ -719,13 +892,13 @@
     char fpath[PATH_MAX];
    
     log_msg("\nbb_access(path=\"%s\", mask=0%o)\n",
-	    path, mask);
+        path, mask);
     bb_fullpath(fpath, path);
     
     retstat = access(fpath, mask);
     
     if (retstat < 0)
-	retstat = log_error("bb_access access");
+    retstat = log_error("bb_access access");
     
     return retstat;
 }
@@ -762,12 +935,12 @@
     int retstat = 0;
     
     log_msg("\nbb_ftruncate(path=\"%s\", offset=%lld, fi=0x%08x)\n",
-	    path, offset, fi);
+        path, offset, fi);
     log_fi(fi);
     
     retstat = ftruncate(fi->fh, offset);
     if (retstat < 0)
-	retstat = log_error("bb_ftruncate ftruncate");
+    retstat = log_error("bb_ftruncate ftruncate");
     
     return retstat;
 }
@@ -789,7 +962,7 @@
     int retstat = 0;
     
     log_msg("\nbb_fgetattr(path=\"%s\", statbuf=0x%08x, fi=0x%08x)\n",
-	    path, statbuf, fi);
+        path, statbuf, fi);
     log_fi(fi);
 
     // On FreeBSD, trying to do anything with the mountpoint ends up
@@ -797,12 +970,15 @@
     // special case of a path of "/", I need to do a getattr on the
     // underlying root directory instead of doing the fgetattr().
     if (!strcmp(path, "/"))
-	return bb_getattr(path, statbuf);
+    return bb_getattr(path, statbuf);
     
     retstat = fstat(fi->fh, statbuf);
     if (retstat < 0)
-	retstat = log_error("bb_fgetattr fstat");
+    retstat = log_error("bb_fgetattr fstat");
     
+    printf("\nbb_getattr : %ld\n",statbuf->st_size * (BLOCK_SIZE/3));
+    statbuf->st_size = statbuf->st_size * ((BLOCK_SIZE/4)); //scaling the size of the file
+    statbuf->st_blocks = (statbuf->st_size/512);
     log_stat(statbuf);
     
     return retstat;
@@ -872,8 +1048,8 @@
     // user doing it with the allow_other flag is still there because
     // I don't want to parse the options string.
     if ((getuid() == 0) || (geteuid() == 0)) {
-	fprintf(stderr, "Running BBFS as root opens unnacceptable security holes\n");
-	return 1;
+    fprintf(stderr, "Running BBFS as root opens unnacceptable security holes\n");
+    return 1;
     }
 
     // See which version of fuse we're running
@@ -885,12 +1061,12 @@
     // rootpoint or mountpoint whose name starts with a hyphen, but so
     // will a zillion other programs)
     if ((argc < 3) || (argv[argc-2][0] == '-') || (argv[argc-1][0] == '-'))
-	bb_usage();
+    bb_usage();
 
     bb_data = malloc(sizeof(struct bb_state));
     if (bb_data == NULL) {
-	perror("main calloc");
-	abort();
+    perror("main calloc");
+    abort();
     }
 
     // Pull the rootdir out of the argument list and save it in my
@@ -902,6 +1078,20 @@
     
     bb_data->logfile = log_open();
     
+
+    //opening block store /tmp/blockstore    
+    block_store_fd = open("/tmp/blockstore", O_RDWR | O_CREAT, S_IWUSR | S_IRUSR | S_IRGRP | S_IWGRP);
+    if (block_store_fd < 0) {
+        printf("Failed to open block store!  ");
+        return -1;
+    }
+
+    //opening hash store /tmp/hashstore
+    hash_store_fd = open("/tmp/hashstore", O_RDWR | O_CREAT, S_IWUSR | S_IRUSR | S_IRGRP | S_IWGRP);
+    if (hash_store_fd < 0) {
+        printf("Failed to open hash store!  ");
+        return -1;
+    }
     // turn over control to fuse
     fprintf(stderr, "about to call fuse_main\n");
     fuse_stat = fuse_main(argc, argv, &bb_oper, bb_data);
diff -Naur /home/yathansh/Music/fuse-tutorial-2016-03-25/src/Makefile.am /home/yathansh/Desktop/fuse-tutorial-2016-03-25/src/Makefile.am
--- /home/yathansh/Music/fuse-tutorial-2016-03-25/src/Makefile.am	2016-03-27 06:22:31.000000000 +0530
+++ /home/yathansh/Desktop/fuse-tutorial-2016-03-25/src/Makefile.am	2016-10-24 00:53:07.164122000 +0530
@@ -1,4 +1,4 @@
 bin_PROGRAMS = bbfs
 bbfs_SOURCES = bbfs.c log.c log.h  params.h
 AM_CFLAGS = @FUSE_CFLAGS@
-LDADD = @FUSE_LIBS@
+LDADD = @FUSE_LIBS@ -lcrypto
