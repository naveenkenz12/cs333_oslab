diff --git a/Makefile b/Makefile
index 93d525a..dd00aeb 100644
--- a/Makefile
+++ b/Makefile
@@ -173,6 +173,7 @@ UPROGS=\
 	_usertests\
 	_wc\
 	_zombie\
+	_testcow\
 
 fs.img: mkfs README $(UPROGS)
 	./mkfs fs.img README $(UPROGS)
@@ -209,7 +210,7 @@ QEMUGDB = $(shell if $(QEMU) -help | grep -q '^-gdb'; \
 	then echo "-gdb tcp::$(GDBPORT)"; \
 	else echo "-s -p $(GDBPORT)"; fi)
 ifndef CPUS
-CPUS := 2
+CPUS := 1
 endif
 QEMUOPTS = -drive file=fs.img,index=1,media=disk,format=raw -drive file=xv6.img,index=0,media=disk,format=raw -smp $(CPUS) -m 512 $(QEMUEXTRA)
 
diff --git a/defs.h b/defs.h
index 8f01b1f..68b720b 100644
--- a/defs.h
+++ b/defs.h
@@ -68,6 +68,14 @@ char*           kalloc(void);
 void            kfree(char*);
 void            kinit1(void*, void*);
 void            kinit2(void*, void*);
+//lab_6_modification_start
+extern int 		numfreepages;
+extern char 	pg_ref_array[];
+void 			pgcountinit(void);
+void			increase_ref_count(uint);
+void			decrease_ref_count(uint);
+void			set_ref_count_to_one(uint);
+//lab_6_modification_end
 
 // kbd.c
 void            kbdintr(void);
@@ -116,6 +124,9 @@ void            userinit(void);
 int             wait(void);
 void            wakeup(void*);
 void            yield(void);
+//lab_6_modification_start
+int 			getNumFreePages(void);
+//lab_6_modification_end
 
 // swtch.S
 void            swtch(struct context**, struct context*);
@@ -181,6 +192,9 @@ void            switchuvm(struct proc*);
 void            switchkvm(void);
 int             copyout(pde_t*, uint, void*, uint);
 void            clearpteu(pde_t *pgdir, char *uva);
+//lab_6_modification_start
+void 			handle_pgflt(void);
+//lab_6_modification_end
 
 // number of elements in fixed-size array
 #define NELEM(x) (sizeof(x)/sizeof((x)[0]))
diff --git a/exec.c b/exec.c
index 6be6af1..66adde8 100644
--- a/exec.c
+++ b/exec.c
@@ -32,10 +32,8 @@ exec(char *path, char **argv)
     goto bad;
   if(elf.magic != ELF_MAGIC)
     goto bad;
-
   if((pgdir = setupkvm()) == 0)
     goto bad;
-
   // Load program into memory.
   sz = 0;
   for(i=0, off=elf.phoff; i<elf.phnum; i++, off+=sizeof(ph)){
diff --git a/kalloc.c b/kalloc.c
index ca30d55..1c4dc74 100644
--- a/kalloc.c
+++ b/kalloc.c
@@ -9,6 +9,10 @@
 #include "mmu.h"
 #include "spinlock.h"
 
+//lab_6_modification_start
+int numfreepages;
+//lab_6_modification_end
+
 void freerange(void *vstart, void *vend);
 extern char end[]; // first address after kernel loaded from ELF file
 
@@ -22,6 +26,59 @@ struct {
   struct run *freelist;
 } kmem;
 
+//lab_6_modification_start
+//pg_ref_array[i] will keep refernece count of physical location i
+//total physical location will range from [0,PHYSTOP/PGSIZE)
+char pg_ref_array[PHYSTOP/PGSIZE];
+
+struct {
+  struct spinlock lock;
+  int use_lock;
+} pg_ref;
+
+void
+pgcountinit()
+{ 
+  initlock(&pg_ref.lock, "pg_ref");
+  pg_ref.use_lock = 0;
+  numfreepages = 0;
+  int i = 0;
+  for(;i<PHYSTOP/PGSIZE;i++)pg_ref_array[i]= 1;     
+  //kernel will free at start to make it 0
+}
+
+void
+decrese_ref_count(uint location)
+{
+  if(pg_ref.use_lock)
+    acquire(&pg_ref.lock);
+  pg_ref_array[location] = pg_ref_array[location] - 1;
+  if(pg_ref.use_lock)
+    release(&pg_ref.lock);
+}
+
+void
+increase_ref_count(uint location)
+{
+  if(pg_ref.use_lock)
+    acquire(&pg_ref.lock);
+  pg_ref_array[location] = pg_ref_array[location] + 1;
+  if(pg_ref.use_lock)
+    release(&pg_ref.lock);
+}
+
+void
+set_ref_count_to_one(uint location)
+{
+  if(pg_ref.use_lock)
+    acquire(&pg_ref.lock);
+  pg_ref_array[location] = 1;
+  if(pg_ref.use_lock)
+    release(&pg_ref.lock);
+}
+
+//lab_6_modification_end
+
 // Initialization happens in two phases.
 // 1. main() calls kinit1() while still using entrypgdir to place just
 // the pages mapped by entrypgdir on free list.
@@ -40,6 +97,9 @@ kinit2(void *vstart, void *vend)
 {
   freerange(vstart, vend);
   kmem.use_lock = 1;
+  //lab_6_modification_start
+  pg_ref.use_lock = 1;
+  //lab_6_modification_end
 }
 
 void
@@ -56,6 +116,10 @@ freerange(void *vstart, void *vend)
 // which normally should have been returned by a
 // call to kalloc().  (The exception is when
 // initializing the allocator; see kinit above.)
+
+//lab_6_modification_start
+/* commented the old kfree function
+//lab_6_modification_end
 void
 kfree(char *v)
 {
@@ -75,10 +139,55 @@ kfree(char *v)
   if(kmem.use_lock)
     release(&kmem.lock);
 }
+//lab_6_modification_start
+*/
+//lab_6_modification_end
+
+//lab_6_modification_start
+void
+kfree(char *v)
+{
+  struct run *r;
+
+  if((uint)v % PGSIZE || v < end || V2P(v) >= PHYSTOP)
+    panic("kfree");
+
+  uint location = V2P(v)>>12;        // divided by PGSIZE(4096)
+
+  if(kmem.use_lock)
+    acquire(&kmem.lock);
+
+  decrese_ref_count(location);
+
+  //first decreses the reference count corresponding to physical
+  //location by 1.
+  //if the refernce count == 0, i.e. now no virtual address 
+  //points to that physical location, free that page
+
+  if(pg_ref_array[location]==0)
+  {
+    // Fill with junk to catch dangling refs.
+    memset(v, 1, PGSIZE);
+
+    r = (struct run*)v;
+    r->next = kmem.freelist;
+    kmem.freelist = r;
+    numfreepages = numfreepages + 1;
+  }
+
+  if(kmem.use_lock)
+    release(&kmem.lock);
+
+}
+//lab_6_modification_end
 
 // Allocate one 4096-byte page of physical memory.
 // Returns a pointer that the kernel can use.
 // Returns 0 if the memory cannot be allocated.
+
+//lab_6_modification_start
+/* commented the old kalloc function
+//lab_6_modification_end
 char*
 kalloc(void)
 {
@@ -93,4 +202,32 @@ kalloc(void)
     release(&kmem.lock);
   return (char*)r;
 }
+//lab_6_modification_start
+*/
+//lab_6_modification_end
 
+//lab_6_modification_start
+char*
+kalloc(void)
+{
+  struct run *r;
+
+  if(kmem.use_lock)
+    acquire(&kmem.lock);
+
+  r = kmem.freelist;
+  if(r)
+  {
+    kmem.freelist = r->next;
+    //number of free pages decreases by 1
+    numfreepages = numfreepages - 1;
+    uint location = V2P((char*)r)>>12;        // divided by PGSIZE(4096)
+    //whenever a new page is assigned, its reference count will be 1
+    
+    set_ref_count_to_one(location);
+  }
+  if(kmem.use_lock)
+    release(&kmem.lock);
+  return (char*)r;
+}
+//lab_6_modification_end
\ No newline at end of file
diff --git a/main.c b/main.c
index 731e429..ef4b7b7 100644
--- a/main.c
+++ b/main.c
@@ -17,12 +17,14 @@ extern char end[]; // first address after kernel loaded from ELF file
 int
 main(void)
 {
+  //lab_6_modification_start
+  pgcountinit();   //initialize numFreePages and array of reference count
+  //lab_6_modification_end
   kinit1(end, P2V(4*1024*1024)); // phys page allocator
   kvmalloc();      // kernel page table
   mpinit();        // detect other processors
   lapicinit();     // interrupt controller
   seginit();       // segment descriptors
-  cprintf("\ncpu%d: starting xv6\n\n", cpunum());
   picinit();       // another interrupt controller
   ioapicinit();    // another interrupt controller
   consoleinit();   // console hardware
@@ -38,6 +40,7 @@ main(void)
   kinit2(P2V(4*1024*1024), P2V(PHYSTOP)); // must come after startothers()
   userinit();      // first user process
   mpmain();        // finish this processor's setup
+
 }
 
 // Other CPUs jump here from entryother.S.
diff --git a/proc.c b/proc.c
index 7d03ad7..8a9a81b 100644
--- a/proc.c
+++ b/proc.c
@@ -176,7 +176,6 @@ fork(void)
   np->state = RUNNABLE;
 
   release(&ptable.lock);
-
   return pid;
 }
 
@@ -483,3 +482,4 @@ procdump(void)
     cprintf("\n");
   }
 }
+
diff --git a/syscall.c b/syscall.c
index 9ae7536..1c2afe9 100644
--- a/syscall.c
+++ b/syscall.c
@@ -99,6 +99,10 @@ extern int sys_wait(void);
 extern int sys_write(void);
 extern int sys_uptime(void);
 
+//lab_6_modification_start
+extern int sys_getNumFreePages(void);
+//lab_6_modification_end
+
 static int (*syscalls[])(void) = {
 [SYS_fork]    sys_fork,
 [SYS_exit]    sys_exit,
@@ -121,6 +125,10 @@ static int (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+
+//lab_6_modification_start
+[SYS_getNumFreePages]	sys_getNumFreePages,
+//lab_6_modification_end
 };
 
 void
diff --git a/syscall.h b/syscall.h
index bc5f356..18edb05 100644
--- a/syscall.h
+++ b/syscall.h
@@ -20,3 +20,7 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+
+//lab_6_modification_start
+#define SYS_getNumFreePages	22
+//lab_6_modification_end
\ No newline at end of file
diff --git a/sysproc.c b/sysproc.c
index 6b585e0..2c332fc 100644
--- a/sysproc.c
+++ b/sysproc.c
@@ -89,3 +89,12 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+
+//lab_6_modification_start
+int
+sys_getNumFreePages(void)
+{
+	return numfreepages;
+}
+//lab_6_modification_end
\ No newline at end of file
diff --git a/testcow.c b/testcow.c
new file mode 100644
index 0000000..ba4d8c0
--- /dev/null
+++ b/testcow.c
@@ -0,0 +1,34 @@
+//lab_6_modification_start
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+#include "fs.h"
+
+int glob;
+
+int
+main()
+{
+	printf(1,"Parent start: no. of free page = %d\n",getNumFreePages());
+	if(fork()==0)
+	{
+		printf(1,"Child1: no. of free page just after fork = %d\n",getNumFreePages());
+		glob = 15;
+		printf(1,"Child1: no. of free page after some write = %d\n",getNumFreePages());
+		exit();
+	}
+	if(fork()==0)
+	{
+		printf(1,"Child2: no. of free page just after fork = %d\n",getNumFreePages());
+		glob = 25;
+		printf(1,"Child2: no. of free page after some write = %d\n",getNumFreePages());
+		exit();
+	}
+	wait();
+	wait();
+	printf(1,"Parent end: no. of free page = %d\n",getNumFreePages());
+	exit();
+	return 0;
+}
+
+//lab_6_modification_end
\ No newline at end of file
diff --git a/trap.c b/trap.c
index e6b3784..f8cee91 100644
--- a/trap.c
+++ b/trap.c
@@ -45,6 +45,14 @@ trap(struct trapframe *tf)
       exit();
     return;
   }
+  //lab_6_modification_start
+  if(tf->trapno == T_PGFLT)
+  {
+    proc->tf = tf;
+    handle_pgflt();
+    return;
+  }
+  //lab_6_modification_end
 
   switch(tf->trapno){
   case T_IRQ0 + IRQ_TIMER:
diff --git a/user.h b/user.h
index f45b8d5..2ac70fe 100644
--- a/user.h
+++ b/user.h
@@ -23,6 +23,9 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+//lab_6_modification_start
+int getNumFreePages(void);
+//lab_6_modification_end
 
 // ulib.c
 int stat(char*, struct stat*);
diff --git a/usys.S b/usys.S
index 8bfd8a1..c4b86d7 100644
--- a/usys.S
+++ b/usys.S
@@ -29,3 +29,7 @@ SYSCALL(getpid)
 SYSCALL(sbrk)
 SYSCALL(sleep)
 SYSCALL(uptime)
+
+#lab_6_modification_start
+SYSCALL(getNumFreePages)
+#lab_6_modification_end
\ No newline at end of file
diff --git a/vm.c b/vm.c
index d9aaa7e..2c4fd8a 100644
--- a/vm.c
+++ b/vm.c
@@ -313,6 +313,9 @@ clearpteu(pde_t *pgdir, char *uva)
 
 // Given a parent process's page table, create a copy
 // of it for a child.
+//lab_6_modification_start
+/* commented old copyuvm function
+//lab_6_modification_end
 pde_t*
 copyuvm(pde_t *pgdir, uint sz)
 {
@@ -342,6 +345,105 @@ bad:
   freevm(d);
   return 0;
 }
+//lab_6_modification_start
+*/
+//lab_6_modification_end
+
+//lab_6_modification_start
+
+pde_t*
+copyuvm(pde_t *pgdir, uint sz)
+{
+  pde_t *d;
+  pte_t *pte;
+  uint pa, i, flags;
+
+  if((d = setupkvm()) == 0)
+    return 0;
+  for(i = 0; i < sz; i += PGSIZE){
+    if((pte = walkpgdir(pgdir, (void *) i, 0)) == 0)
+      panic("copyuvm: pte should exist");
+    if(!(*pte & PTE_P))
+      panic("copyuvm: page not present");
+    pa = PTE_ADDR(*pte);
+    flags = PTE_FLAGS(*pte) & ~PTE_W;    //for child
+    *pte = (*pte) & ~PTE_W;              //for parent
+    
+    uint location = pa>>12;              // divided by PGSIZE(4096)
+    
+    increase_ref_count(location);
+
+    if(mappages(d, (void*)i, PGSIZE, pa, flags) < 0)
+      goto bad;
+  }
+  lcr3(V2P(pgdir));                    //flush tlb and reinstall
+  return d;
+
+bad:
+  freevm(d);
+  return 0;
+}
+
+//page fualt handle function
+void
+handle_pgflt(void)
+{
+  pte_t *pte;
+  char *va;
+  uint pa;
+  char *mem;
+  va = (char *)rcr2();      
+  //get the virtual address of fault location
+  pte = walkpgdir(proc->pgdir,(void*) va, 0);
+  //pte = page table entry corresponding to va
+  //passed with alloc = 0, so that if it does not exist
+  //do not create new pte
+
+  //if present and not illegal
+  if(*pte & PTE_P)
+  {
+    if((pte = walkpgdir(proc->pgdir, (void *)va, 0)) == 0)
+      panic("copyuvm: pte should exist");
+    
+    if(!(*pte & PTE_P))
+      panic("copyuvm: page not present");
+    
+    pa = PTE_ADDR(*pte);
+    //allocate a new page
+    mem = kalloc();
+    
+    if(pg_ref_array[pa>>12]==1)
+      *pte |= PTE_W;
+    else if(pg_ref_array[pa>>12] > 1)
+      if(mem == 0)
+        goto bad2;
+      
+    memmove(mem, (char*)P2V(pa), PGSIZE);
+    *pte = V2P(mem) | PTE_P | PTE_W | PTE_U;
+    //fre up that physical address
+    //kfree function is modified, first kfree decreases the
+    //reference count that physical address by 1
+    //if the modified reference count == 0, the page
+    //corresponding to that physical address is freed up.
+
+    kfree(P2V(pa));
+    
+    //reinstall page table and flush tlb
+    lcr3(V2P(proc->pgdir));
+    return;
+  }
+  else
+  {
+    //kill the process
+    cprintf("\nILLEGAL VIRTUAL ADDRESS\n");
+    proc->killed = 1;
+    return;
+  }
+  bad2:
+    freevm(proc->pgdir);
+    return;
+}
+//lab_6_modification_end
 
 //PAGEBREAK!
 // Map user virtual address to kernel address.
